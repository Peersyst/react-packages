import { extract } from "@peersyst/react-utils";
import { TextStyle, ViewStyle } from "react-native";

export const viewStyleKeys: Readonly<(keyof ViewStyle)[]> = [
    "backfaceVisibility",
    "backgroundColor",
    "borderBottomColor",
    "borderBottomEndRadius",
    "borderBottomLeftRadius",
    "borderBottomRightRadius",
    "borderBottomStartRadius",
    "borderBottomWidth",
    "borderColor",
    "borderEndColor",
    "borderLeftColor",
    "borderLeftWidth",
    "borderRadius",
    "borderRightColor",
    "borderRightWidth",
    "borderStartColor",
    "borderStyle",
    "borderTopColor",
    "borderTopEndRadius",
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderTopStartRadius",
    "borderTopWidth",
    "borderWidth",
    "opacity",
    "elevation",
    "shadowColor",
    "shadowOffset",
    "shadowOpacity",
    "shadowRadius",
    "transform",
    "transformMatrix",
    "rotation",
    "scaleX",
    "scaleY",
    "translateX",
    "translateY",
    "alignContent",
    "alignItems",
    "alignSelf",
    "aspectRatio",
    "borderBottomWidth",
    "borderEndWidth",
    "borderLeftWidth",
    "borderRightWidth",
    "borderStartWidth",
    "borderTopWidth",
    "borderWidth",
    "bottom",
    "display",
    "end",
    "flex",
    "flexBasis",
    "flexDirection",
    "rowGap",
    "gap",
    "columnGap",
    "flexGrow",
    "flexShrink",
    "flexWrap",
    "height",
    "justifyContent",
    "left",
    "margin",
    "marginBottom",
    "marginEnd",
    "marginHorizontal",
    "marginLeft",
    "marginRight",
    "marginStart",
    "marginTop",
    "marginVertical",
    "maxHeight",
    "maxWidth",
    "minHeight",
    "minWidth",
    "overflow",
    "padding",
    "paddingBottom",
    "paddingEnd",
    "paddingHorizontal",
    "paddingLeft",
    "paddingRight",
    "paddingStart",
    "paddingTop",
    "paddingVertical",
    "position",
    "right",
    "start",
    "top",
    "width",
    "zIndex",
    "direction",
] as const;

export type ViewStylesKeys = typeof viewStyleKeys[number];

export default function extractViewStyles<T extends ViewStyle>(
    styles?: T,
): [TextStyle, Omit<T, ViewStylesKeys>] {
    if (!styles) return [{}, {} as Omit<T, ViewStylesKeys>];

    return extract(styles, ...viewStyleKeys);
}
